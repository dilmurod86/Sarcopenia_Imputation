{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Calculate Mean and Standard Deviation","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\n# Example accuracy data for each model and imputation method\naccuracies_knn = [0.934, 0.934, 0.970, 0.970]\naccuracies_mice = [0.922, 0.922, 0.970, 0.970]\naccuracies_svr = [0.898, 0.910, 0.982, 0.964]\n\n# Calculate mean and standard deviation\nmean_knn = np.mean(accuracies_knn)\nstd_knn = np.std(accuracies_knn, ddof=1)\nmean_mice = np.mean(accuracies_mice)\nstd_mice = np.std(accuracies_mice, ddof=1)\nmean_svr = np.mean(accuracies_svr)\nstd_svr = np.std(accuracies_svr, ddof=1)\n\nprint(f\"KNN: mean = {mean_knn}, std = {std_knn}\")\nprint(f\"MICE: mean = {mean_mice}, std = {std_mice}\")\nprint(f\"SVR: mean = {mean_svr}, std = {std_svr}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:38:27.833729Z","iopub.execute_input":"2024-07-23T08:38:27.834143Z","iopub.status.idle":"2024-07-23T08:38:27.842747Z","shell.execute_reply.started":"2024-07-23T08:38:27.834113Z","shell.execute_reply":"2024-07-23T08:38:27.841490Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"KNN: mean = 0.952, std = 0.020784609690826482\nMICE: mean = 0.946, std = 0.027712812921101997\nSVR: mean = 0.9385, std = 0.040804411526206306\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Bootstrap Confidence Intervals","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\ndef bootstrap(data, n_bootstrap=1000):\n    bootstrap_samples = np.random.choice(data, size=(n_bootstrap, len(data)), replace=True)\n    bootstrap_means = np.mean(bootstrap_samples, axis=1)\n    ci_lower = np.percentile(bootstrap_means, 2.5)\n    ci_upper = np.percentile(bootstrap_means, 97.5)\n    return np.mean(bootstrap_means), ci_lower, ci_upper\n\n# Example accuracy data\naccuracies_knn = np.array([0.934, 0.934, 0.970, 0.970])\naccuracies_mice = np.array([0.922, 0.922, 0.970, 0.970])\naccuracies_svr = np.array([0.898, 0.910, 0.982, 0.964])\n\n# Calculate bootstrap confidence intervals\nmean_knn, ci_lower_knn, ci_upper_knn = bootstrap(accuracies_knn)\nmean_mice, ci_lower_mice, ci_upper_mice = bootstrap(accuracies_mice)\nmean_svr, ci_lower_svr, ci_upper_svr = bootstrap(accuracies_svr)\n\nprint(f\"KNN: mean = {mean_knn}, 95% CI = ({ci_lower_knn}, {ci_upper_knn})\")\nprint(f\"MICE: mean = {mean_mice}, 95% CI = ({ci_lower_mice}, {ci_upper_mice})\")\nprint(f\"SVR: mean = {mean_svr}, 95% CI = ({ci_lower_svr}, {ci_upper_svr})\")","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:42:31.814526Z","iopub.execute_input":"2024-07-23T08:42:31.814914Z","iopub.status.idle":"2024-07-23T08:42:31.832386Z","shell.execute_reply.started":"2024-07-23T08:42:31.814887Z","shell.execute_reply":"2024-07-23T08:42:31.831244Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"KNN: mean = 0.951847, 95% CI = (0.934, 0.97)\nMICE: mean = 0.946072, 95% CI = (0.922, 0.97)\nSVR: mean = 0.9387654999999999, 95% CI = (0.904, 0.9775)\n","output_type":"stream"}]}]}